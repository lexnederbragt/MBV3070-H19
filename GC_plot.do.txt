=== Reading in the genome ===
We already know how to a fasta file. This time, we use genomic DNA, not RNA

!bc pycod
filename = 'data/NC_000913_E_coli_K12.fasta'
f = open(filename)
lines = f.readlines()
f.close()

print("Identifier:")
print(lines[0])
genome = ""
for line in lines[1:]:
    genome += line.strip()
print(len(genome))
!ec

=== Creating non-overlapping windows ===
We want to develop a program that splits a DNA sequence into 100 bp, non overlapping windows. It is always a good idea to start with a simpler example, make that work, and then expand to the real situation you need the program for.

So, let's use a dummy DNA sequence first.

!bc pycod
seq = 'A' * 10 + 'C' * 10 + 'G' * 10 + 'T' * 10
seq = 3 * seq
print(seq)
!ec
Now we split it into 10 base windows

!bc pycod
length = len(seq)
window = 10
for i in range(0, length, window):
    print(i, i + window, seq[i: i + window])
!ec
Or 100 bp windows.

!bc pycod
length = len(seq)
window = 100
for i in range(0, length, window):
    print(i, i + window, seq[i: i + window])
!ec

=== Creating non-overlapping windows, DNA ===

!bc pycod
length = len(genome)
window = 100
for i in range(0, length, window):
    segment = genome[i: i + window]
    print(i, i + 10, segment)
!ec

=== GC percentage ===
From lab

!bc pycod
dna = "ACGT"
g = dna.count("G")
c = dna.count("C")
gc = (g + c)*100/len(dna)
print(gc)
print(round(gc))
!ec

=== Wrap this in a function ===

!bc pycod
def perc_gc(dna):
    """Calculates percentage GC for a DNA sequence
       Rounds off to zero decimals"""
    dna = dna.upper()
    g = dna.count("G")
    c = dna.count("C")
    gc = (g + c)*100/len(dna)
    return(round(gc))

dna = "ACGT"
print(perc_gc(dna))
!ec

=== Use function for genome ===

!bc pycod
length = len(genome)
window = 100
for i in range(0, length, window):
    segment = genome[i: i + window]
    print(perc_gc(segment))
!ec
We want to collect the percentages so we can plot a histogram og their frequencies

!bc pycod
length = len(genome)
window = 100
gcs = []
for i in range(0, length, window):
    segment = genome[i: i + window]
    gc = perc_gc(segment)
    gcs.append(gc)
!ec

!bc pycod
import matplotlib.pyplot as plt
plt.hist(gcs)
plt.show()
!ec
With more resolution

!bc pycod
plt.hist(gcs, bins = 100)
plt.show()
!ec

=== Use dictionary instead ===
Here is a way to make a line plot of the frequencies. There are better ways, but this illustrates the principle with fairly easy code. First, we replace the list with a dictionary:

!bc pycod
length = len(genome)
window = 100
gcs = {}
for i in range(0, length, window):
    segment = genome[i: i + window]
    gc = perc_gc(segment)
    gcs[gc] = gcs[gc] + 1
!ec
We can set up the dictionary to have all possible keys (gc percentages), with `0` for all values

!bc pycod
gcs = {}
for i in range(0,100):
    gcs[i] = 0
gcs
!ec
Now we can fill the dictionary:

!bc pycod
length = len(genome)
window = 100
gcs = {}
for i in range(0,100):
    gcs[i] = 0
for i in range(0, length, window):
    segment = genome[i: i + window]
    gc = perc_gc(segment)
    gcs[gc] += 1
!ec

!bc pycod
gcs
!ec

=== Plotting ===

!bc pycod
plt.plot(gcs.keys(), gcs.values(), '-')
plt.show()
!ec

!bc pycod
plt.plot(gcs.keys(), gcs.values(), '-')
plt.xlabel("Percentage GC in 100 bp window")
plt.ylabel("Count")
plt.show()
!ec

=== Wrap parts in a function ===

!bc pycod
def get_genome(filename):
    """Reads a fasta file and splits into identifier (first line)
       and sequence (concatenation of all other lines)"""
    f = open(filename)
    lines = f.readlines()
    f.close()

    identifier = lines[0]
    genome = ""
    for line in lines[1:]:
        genome += line.strip()
    return(identifier, genome)

filename = 'data/NC_000913_E_coli_K12.fasta'
identifier, genome = get_genome(filename)
print(identifier, len(genome))
!ec

!bc pycod
def get_gc_freq(genome, window):
    """Creates a dictionary with frequency of %GC for each window in genome"""
    length = len(genome)
    gcs = {}
    for i in range(0,100):
        gcs[i] = 0
    for i in range(0, length, window):
        segment = genome[i: i + window]
        gc = perc_gc(segment)
        gcs[gc] += 1
    return(gcs)


window = 100
gcs = get_gc_freq(genome, window)
plt.plot(gcs.keys(), gcs.values(), '-')
plt.xlabel("Percentage GC in 100 bp window")
plt.ylabel("Count")
plt.show()
!ec

!bc pycod
filename2 = 'data/AKVW01.1_Rhodobacter_sphaeroides.fasta'
id2, genome2 = get_genome(filename2)
print(id2, len(genome2))
gcs2 = get_gc_freq(genome2, window)
plt.plot(gcs2.keys(), gcs2.values(), '-')
plt.xlabel("Percantage GC in 100 bp window")
plt.ylabel("Count")
plt.show()
!ec

!bc pycod
plt.plot(gcs.keys(), gcs.values(), '-')
plt.plot(gcs2.keys(), gcs2.values(), '-')
plt.xlabel("Percantage GC in 100 bp window")
plt.ylabel("Count")
plt.show()
!ec

!bc pycod
filename3 = 'data/AL844501.2_Plasmodium_falciparum.fasta'
id3, genome3 = get_genome(filename3)
print(id3, len(genome3))
gcs3 = get_gc_freq(genome3, window)
plt.plot(gcs.keys(), gcs.values(), '-')
plt.plot(gcs2.keys(), gcs2.values(), '-')
plt.plot(gcs3.keys(), gcs3.values(), '-')
plt.xlabel("Percantage GC in 100 bp window")
plt.ylabel("Count")
plt.show()
!ec

=== Scale Malaria data ===

!bc pycod
gcs3 = get_gc_freq(genome3[0:7000000], window)
plt.plot(gcs.keys(), gcs.values(), '-')
plt.plot(gcs2.keys(), gcs2.values(), '-')
plt.plot(gcs3.keys(), gcs3.values(), '-')
plt.xlabel("Percantage GC in 100 bp window")
plt.ylabel("Count")
plt.show()
!ec

=== Add legend ===

!bc pycod
gcs3 = get_gc_freq(genome3[0:7000000], window)
plt.plot(gcs.keys(), gcs.values(), '-', label = "E. coli")
plt.plot(gcs2.keys(), gcs2.values(), '-', label = "R. sphaeroides")
plt.plot(gcs3.keys(), gcs3.values(), '-', label = "P. falciparum")
plt.xlabel("Percantage GC in 100 bp window")
plt.ylabel("Count")
plt.legend()
plt.show()
!ec
The references used for alignment were E. coli K12 substr. MG1655 (GenBank NC_000913.2), R. sphaeroides 2.4.1 with plasmids (GenBank AKVW01000000), P. falciparum (Malaria parasite) chromosome 1 (GenBank https://www.ncbi.nlm.nih.gov/nuccore/LR131290.1), and Human assembly 19/GRCh37 (GenBank GCA_000001405.1).
